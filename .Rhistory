angle_idx <- ang_pga_rotd50_calc(h1 = h1_sub, h2 = h2_sub)
h_combin <- h1_sub * cos(pi * angle_idx / 180) + h2_sub * sin(pi * angle_idx / 180)
fas_h <- fas_cal(ts = h_combin, dt = dt)
h_smooth <- ko_smooth(freq = fas_h$freq, amp = fas_h$amp, rate = 1.5)
fas_v <- fas_cal(ts = v_sub, dt = dt)
v_smooth <- ko_smooth(freq = fas_v$freq, amp = fas_v$amp, rate = 1.5)
hv_ratio <- h_smooth / v_smooth
freq <- fas_h$freq
# interpolation
rotd50_hv_ratio <- approx(freq, hv_ratio, freq_hv_mean)$y
res$rotd50_hv_ratio <- rotd50_hv_ratio
}
# polar curve:
if (polar_curves_flag) {
polar_degs <- seq(0, 179, by = deg_increment)
polar_hv_ratio <- matrix(data = NA, nrow = length(freq_polar), ncol = length(polar_degs))
h1_fft <- fft(h1_sub)
h2_fft <- fft(h2_sub)
for (i in 1:length(polar_degs)) {
if (i == 1) {
fas_v <- fas_cal(ts = v_sub, dt = dt)
freq <- fas_v$freq
v_smooth <- ko_smooth(freq = fas_v$freq, amp = fas_v$amp)
}
angle_idx <- polar_degs[i]
h_fft <- h1_fft * cos(pi * angle_idx / 180) + h2_fft * sin(pi * angle_idx / 180)
h_smooth <- ko_smooth(freq = freq, amp = abs(h_fft) * dt)
hv_ratio <- h_smooth / v_smooth
polar_hv_ratio[, i] <- approx(freq, hv_ratio, freq_polar)$y
}
res$polar_hv_ratio <- polar_hv_ratio
}
return(res)
}
ptm <- proc.time()
hvsr_list <- lapply(idx_select, hvsr_win_calc, h1_wins = h1_wins, h2_wins = h2_wins,
v_wins = v_wins, dt = dt, rotd50_flag = TRUE, freq_hv_mean = freq_hv_mean,
polar_curves_flag = FALSE)
proc.time() - ptm
#' @param v_wins A list of vertical horizontal component time series. Each element is for one window
#' @param dt The time step
#' @param rotd50_flag The flag indicates if RotD50 HVSR is calculated
#' @param freq_hv_mean The target frequencys of RotD50 HVSR
#' @param polar_curves_flag The flag indicates if polar curves are calculated
#' @param freq_polar The target frequencys of polar HVSR
#' @param deg_increment The degree increment for HVSR polar curves
#' @return The HVSR for the given window
#' @importFrom stats approx fft
#' @export
hvsr_win_calc <- function(i_win, h1_wins, h2_wins, v_wins, dt, rotd50_flag = TRUE, freq_hv_mean,
polar_curves_flag = TRUE, freq_polar, deg_increment = 10) {
h1_sub <- h1_wins[[ i_win ]]
h2_sub <- h2_wins[[ i_win ]]
v_sub <- v_wins[[ i_win ]]
res <- list()
# RotD50 curve:
if (rotd50_flag) {
# find rotation angle for PGA RotD50 and calculate RotD50 HVSR
angle_idx <- ang_pga_rotd50_calc(h1 = h1_sub, h2 = h2_sub)
h_combin <- h1_sub * cos(pi * angle_idx / 180) + h2_sub * sin(pi * angle_idx / 180)
fas_h <- fas_cal(ts = h_combin, dt = dt)
h_smooth <- ko_smooth(freq = fas_h$freq, amp = fas_h$amp, rate = 1)
fas_v <- fas_cal(ts = v_sub, dt = dt)
v_smooth <- ko_smooth(freq = fas_v$freq, amp = fas_v$amp, rate = 1)
hv_ratio <- h_smooth / v_smooth
freq <- fas_h$freq
# interpolation
rotd50_hv_ratio <- approx(freq, hv_ratio, freq_hv_mean)$y
res$rotd50_hv_ratio <- rotd50_hv_ratio
}
# polar curve:
if (polar_curves_flag) {
polar_degs <- seq(0, 179, by = deg_increment)
polar_hv_ratio <- matrix(data = NA, nrow = length(freq_polar), ncol = length(polar_degs))
h1_fft <- fft(h1_sub)
h2_fft <- fft(h2_sub)
for (i in 1:length(polar_degs)) {
if (i == 1) {
fas_v <- fas_cal(ts = v_sub, dt = dt)
freq <- fas_v$freq
v_smooth <- ko_smooth(freq = fas_v$freq, amp = fas_v$amp)
}
angle_idx <- polar_degs[i]
h_fft <- h1_fft * cos(pi * angle_idx / 180) + h2_fft * sin(pi * angle_idx / 180)
h_smooth <- ko_smooth(freq = freq, amp = abs(h_fft) * dt)
hv_ratio <- h_smooth / v_smooth
polar_hv_ratio[, i] <- approx(freq, hv_ratio, freq_polar)$y
}
res$polar_hv_ratio <- polar_hv_ratio
}
return(res)
}
ptm <- proc.time()
hvsr_list <- lapply(idx_select, hvsr_win_calc, h1_wins = h1_wins, h2_wins = h2_wins,
v_wins = v_wins, dt = dt, rotd50_flag = TRUE, freq_hv_mean = freq_hv_mean,
polar_curves_flag = FALSE)
proc.time() - ptm
30*(180/10)
540/60
fas_h <- fas_cal(ts = h1_wins[[1]], dt = dt)
fas_v <- fas_cal(ts = v_wins[[1]], dt = dt)
ptm <- proc.time()
for(i in 1:150){
h_smooth <- ko_smooth(freq = fas_h$freq, amp = fas_h$amp)
v_smooth <- ko_smooth(freq = fas_v$freq, amp = fas_v$amp)
}
proc.time() - ptm
document()
load_all
load_all()
check()
library(hvsrProc)
file.exists("~/.ssh/id_rsa.pub")
usethis::use_readme_rmd()
library(devtools)
create_project('/Users/PFW/Desktop/Project/R_packages/hvsrPeak')
library(devtools)
install.packages('pandoc')
library(hvsrProc)
x <- logspace(1,40)
x
y <- seq(1,40)
plot(log10(x), y, type = 'n', xaxt = 'n')
y <- seq(1,50)
plot(log10(x), y, type = 'n', xaxt = 'n')
?plot
xlab = NA
ylab = NA
type = NA
main = NA
plot(log10(x), y, type = type, xaxt = 'n', xlab = xlab, ylab = ylab, main = main)
type
xlab = NULL
ylab = NULL, type = NULL, main = NULL) {
ylab = NULL
type = NULL
main = NULL
plot(log10(x), y, type = type, xaxt = 'n', xlab = xlab, ylab = ylab, main = main)
log10_scale = 'x'
tick_type = 'lin'
minor_tick = TRUE
log10_ticks(log10(x), y, log10_scale = log10_scale, tick_type = tick_type, minor_tick = minor_tick)
plot(log10(x), y, type = type, xaxt = 'n', xlab = xlab, ylab = ylab, main = main)
log10_ticks(log10(x), y, log10_scale = log10_scale, tick_type = tick_type, minor_tick = minor_tick)
plot(log10(x), y, type = type, xaxt = 'n', xlab = xlab, ylab = ylab, main = main)
log10_ticks(x, y, log10_scale = log10_scale, tick_type = tick_type, minor_tick = minor_tick)
x
x_range <- range(x)
x <- x[x > 0]
x_range <- range(x)
x_range_log10 <- c(ceiling(log10(x_range[1])), floor(log10(x_range[2])))
x_range_log10
x_range_minor_log10 <- c(floor(log10(x_range[1])), ceiling(log10(x_range[2])))
x_range_minor_log10
atx_minor <- outer(1:9, 10^(x_range_minor_log10[1]:x_range_minor_log10[2]))
atx_minor
axis(1, at = atx_minor, labels = FALSE, tcl = par("tcl") * 0.5)
atx_minor
plot(log10(x), y, type = type, xaxt = 'n', xlab = xlab, ylab = ylab, main = main)
x
plot(x, y, type = type, xaxt = 'n', xlab = xlab, ylab = ylab, main = main, log = 'x')
log10_ticks(x, y, log10_scale = log10_scale, tick_type = tick_type, minor_tick = minor_tick)
y <- x
x <- seq(1,50)
plot(x, y, type = type, xaxt = 'n', xlab = xlab, ylab = ylab, main = main, log = 'y')
plot(x, y, type = type, yaxt = 'n', xlab = xlab, ylab = ylab, main = main, log = 'y')
log10_ticks(x, y, log10_scale = log10_scale, tick_type = tick_type, minor_tick = minor_tick)
log10_scale = 'y'
plot(x, y, type = type, yaxt = 'n', xlab = xlab, ylab = ylab, main = main, log = 'y')
log10_ticks(x, y, log10_scale = log10_scale, tick_type = tick_type, minor_tick = minor_tick)
x <- y
plot(x, y, type = type, yaxt = 'n', xaxt = 'n', xlab = xlab, ylab = ylab, main = main, log = 'xy')
log10_scale = 'xy'
log10_ticks(x, y, log10_scale = log10_scale, tick_type = tick_type, minor_tick = minor_tick)
#' @param y The array of y values
#' @param log10_scale A string takes "x", "y", or "xy". It indicates the axix that will be plotted in log10 scale
#' @param tick_type A string takes "exp" (the ticks are expressed by 10^) or "lin" (the ticks are expressed by 100..)
#' @param minor_tick Binary, indicates if minor ticks are plotted
#' @param xlab A title for the x axis
#' @param ylab A title for the y axis
#' @param type What type of plot should be drawn. The setting is the same as plot()
#' @param main An overall title for the plot
#' @importFrom graphics axis par
#' @export
plot_log10 <- function(x, y, log10_scale = 'x', tick_type = 'lin', minor_tick = TRUE,
xlab = NULL, ylab = NULL, type = NULL, main = NULL) {
if (log10_scale == 'x') {
plot(x, y, type = type, xaxt = 'n', xlab = xlab, ylab = ylab, main = main, log = 'x')
log10_ticks(x, y, log10_scale = log10_scale, tick_type = tick_type, minor_tick = minor_tick)
}
if (log10_scale == 'y') {
plot(x, y, type = type, yaxt = 'n', xlab = xlab, ylab = ylab, main = main, log = 'y')
log10_ticks(x, y, log10_scale = log10_scale, tick_type = tick_type, minor_tick = minor_tick)
}
if (log10_scale == 'xy') {
plot(x, y, type = type, yaxt = 'n', xaxt = 'n', xlab = xlab, ylab = ylab, main = main, log = 'xy')
log10_ticks(x, y, log10_scale = log10_scale, tick_type = tick_type, minor_tick = minor_tick)
}
}
plot_log10(x,y, log10_scale = 'xy', xlab = 'x val', ylab = 'y val', type = 'l')
plot_log10(x,y, log10_scale = 'xy')
plot_log10(x,y, log10_scale = 'xy', xlab = 'x val', ylab = 'y val', type = 'l', main = 'hello')
library(devtools)
document()
load_all()
plot_log10(x, y)
plot_log10(x, y, log10_scale = 'xy')
plot_log10(x, y, log10_scale = 'xy', type = 'l')
?plot_log10
check()
load_all()
library(hvsrProc)
document()
check()
load_all()
document()
check()
plot_log10(x, y, log10_scale = 'xy', type = 'l', ylim = c(1,10))
load_all()
plot_log10(x, y, log10_scale = 'xy', type = 'l', ylim = c(1,10))
library(hvsrProc)
plot_log10(x, y, log10_scale = 'xy', type = 'l', ylim = c(1,10))
hvsrProc::plot_log10(x, y, log10_scale = 'xy', type = 'l', ylim = c(1,10))
library(hvsrProc)
?ang_pga_rotd50_calc
?hvsrProc::bw_pass()
document()
library(devtools)
document()
?hvsrProc
document()
load_all()
check()
install()
?approx
library(devtools)
load_all()
document()
check()
hvsr_win_calc
library(devtools)
document()
check()
library(devtools)
use_r('peak_fit')
library(rpart)
?rpart
?approx
approx(x = 1:5, y = 2:6, xout = 2.5)
approx(x = 1:5, y = 2:6, xout = 2.5)$y
?cut
library(devtools)
load_all()
check()
?rpart
check()
document()
document()
check()
document()
document()
check()
document()
document()
document()
check()
?optim
?predict
?isempty
pracma::isempty
document()
document()
check()
load_all()
?peak_fit
a <- read.csv(/Volumes/GoogleDrive/My Drive/UCLA/HVSR Research/Peak Identification Code in R/Griffith Observatory_693_meanCurve.csv)
a <- read.csv('/Volumes/GoogleDrive/My Drive/UCLA/HVSR Research/Peak Identification Code in R/Griffith Observatory_693_meanCurve.csv')
head(a)
peak_fit(x_freq = a$Frequency..Hz., hvsr_mean = a$HVSR.ratio, hvsr_sd = a$Standard.deviation)
document()
document()
check()
load()
load_all()
?peak_fit
?gaussian
?gaussian_gen_fit
a <- read.csv('/Volumes/GoogleDrive/My Drive/UCLA/HVSR Research/Peak Identification Code in R/Griffith Observatory_693_meanCurve.csv')
res <- peak_fit(x_freq = a$Frequency..Hz., hvsr_mean = a$HVSR.ratio, hvsr_sd = a$Standard.deviation)
document()
document()
load_all()
res <- peak_fit(x_freq = a$Frequency..Hz., hvsr_mean = a$HVSR.ratio, hvsr_sd = a$Standard.deviation)
res
plot(a$Frequency..Hz., a$HVSR.ratio, type = 'l')
plot(a$Frequency..Hz., a$HVSR.ratio, type = 'l', log = 'x')
lines(a$Frequency..Hz., gaussian_gen_fit(par = as.numeric(res[-1]), x_freq = a$Frequency..Hz.))
document()
document()
document()
load_all()
res <- peak_fit(x_freq = a$Frequency..Hz., hvsr_mean = a$HVSR.ratio, hvsr_sd = a$Standard.deviation)
document()
document()
document()
document()
load_all()
res <- peak_fit(x_freq = a$Frequency..Hz., hvsr_mean = a$HVSR.ratio, hvsr_sd = a$Standard.deviation)
res
lines(a$Frequency..Hz., gaussian_gen_fit(par = as.numeric(res[-1]), x_freq = a$Frequency..Hz.))
lines(a$Frequency..Hz., gaussian_gen_fit(par = as.numeric(res[-1]), x_freq = a$Frequency..Hz.), col = 'red')
document()
document()
document()
check()
?hvsrProc
?hvsrProc::peak_fit_auto
res <- peak_fit_auto(x_freq = a$Frequency..Hz., hvsr_mean = a$HVSR.ratio, hvsr_sd = a$Standard.deviation)
res
res2 <- peak_fit_manual(x_freq = a$Frequency..Hz., hvsr_mean = a$HVSR.ratio, fit_range_lb = 0.1, fit_range_ub = 5)
res2
lines(x = a$Frequency..Hz., y = gaussian_gen_fit(par = as.numeric(res2), x_freq = a$Frequency..Hz.), col = 'green')
document()
check()
document()
document()
document()
?hvsrProc
document()
document()
document()
?hvsrProc
?hvsrProc
document()
check()
?hv_proc
document()
check()
res2 <- peak_fit_manual(x_freq = a$Frequency..Hz., hvsr_mean = a$HVSR.ratio, fit_range_lb = 0.1, fit_range_ub = 5)
a <- read.csv('/Volumes/GoogleDrive/My Drive/UCLA/HVSR Research/Peak Identification Code in R/Griffith Observatory_693_meanCurve.csv')
res2 <- peak_fit_manual(x_freq = a$Frequency..Hz., hvsr_mean = a$HVSR.ratio, fit_range_lb = 0.1, fit_range_ub = 5)
res2
library(devtools)
document()
check()
library(devtools)
document()
document()
check()
document()
document()
document()
document()
document()
document()
check()
document()
dyk <- read.csv('/Users/PFW/Desktop/CSMIP/Main Analysis/NGA_West2_GMPEs/BSSA/Output/eta_BSSA.csv')
dim(dyk)
dyk <- read.csv('/Users/PFW/Desktop/CSMIP/Main Analysis/NGA_West2_GMPEs/BSSA/Output/ttlres_BSSA.csv')
dim(dyk)
dyk_2 <- read.csv('/Users/PFW/Desktop/CSMIP/Data/SITE_TERMS/ttlres_global_NGAW2_DYK.csv')
dim(dyk_2)
dyk[1:5, 1:7]
dyk_2[1:5, 1:7]
pw <- read.csv('/Users/PFW/Desktop/CSMIP/Data/SITE_TERMS/ttlres_global_NGAW2_PF.csv')
dim(pw)
pw[1:5, 1:7]
tail(dyk[,1:7])
tail(dyk_2[,1:7])
tail(pw[,1:7])
a <- read.csv('/Users/PFW/Desktop/CSMIP/Main Analysis/NGA_West2_GMPEs/BSSA/Output/eta_BSSA.csv')
dim(a)
b <- read.csv('/Users/PFW/Desktop/ttlres_global_NGAW2_bssa14.csv')
length(unique(b$EQID))
head
head(b)
source('BSSA14new.R')
source('BSSA14_error.R')
library(nlme)
# NGA West 2 Flatfile
data <- read.csv('../Input/Updated_NGA_West2_Flatfile_RotD50_d050_public_version.csv')
library(devtools)
load_all()
h1 <- read.table('/Volumes/Pengfei_All/CSMIP/H_V/Input_data/1_CI_ADO_HHN.txt', header = F)
h2 <- read.table('/Volumes/Pengfei_All/CSMIP/H_V/Input_data/1_CI_ADO_HHE.txt', header = F)
v <- read.table('/Volumes/Pengfei_All/CSMIP/H_V/Input_data/1_CI_ADO_HHZ.txt', header = F)
dt <- h1[2,1] - h1[1,1]
h1 <- h1[,2]
h2 <- h2[,2]
v <- v[,2]
output_dir <- '/Volumes/Pengfei_All/CSMIP/H_V/Output_data_test'
output_pf_flnm <- 'CI_ADO_'
hv_proc(h1 = h1, h2 = h2, v = v, dt = dt, output_dir = output_dir, output_pf_flnm = output_pf_flnm)
library(devtools)
h1 <- read.table('/Volumes/Pengfei_All/CSMIP/H_V/Input_data/1_CI_ADO_HHN.txt', header = F)
h2 <- read.table('/Volumes/Pengfei_All/CSMIP/H_V/Input_data/1_CI_ADO_HHE.txt', header = F)
v <- read.table('/Volumes/Pengfei_All/CSMIP/H_V/Input_data/1_CI_ADO_HHZ.txt', header = F)
dt <- h1[2,1] - h1[1,1]
h1 <- h1[,2]
h2 <- h2[,2]
v <- v[,2]
output_dir <- '/Volumes/Pengfei_All/CSMIP/H_V/Output_data_test'
output_pf_flnm <- 'CI_ADO_'
filter_flag = TRUE
is_causal = FALSE
hpass_fc = 0.1
lpass_fc = NA
nPole_hp = 5
nPole_lp = 4
order_zero_padding = 2
dc_flag = TRUE
taper_flag = TRUE
t_front = 5
t_end = 5
ko_smooth_flag = TRUE
ko_smooth_b = 20
parzen_flag = FALSE
parzen_bwidth = 1.5
win_width = 150
overlapping = 0
sta_lta_flag = TRUE
sta_lta_moving_term_len = 1
short_term_len = 5
long_term_len = 30
polar_curves_flag = TRUE
deg_increment = 10
resample_lin2log = TRUE
deci_mean_factor = 10
deci_polar_factor = 10
output_freq_min = 0.1
output_freq_max = 50
output_selected_ts = FALSE
output_removed_ts = FALSE
output_selected_hvsr = TRUE
output_removed_hvsr = FALSE
output_mean_curve = TRUE
output_polar_curves = TRUE
output_metadata = TRUE
is_noise
npts_win <- win_width / dt
npts_over <- overlapping / dt
win_moving <- npts_win - npts_over  # the length to move for the next window
num_wins <- floor((length(h1) - npts_win) / win_moving + 1)
npts_win
npts_over
win_moving
num_wins
sta_lta_flag
short_term <- floor(short_term_len / dt)
long_term <- floor(long_term_len / dt)
sta_lta_moving <- floor(sta_lta_moving_term_len / dt)
short_term
sta_lta_moving
# split data into num_wins windows
h1_wins <- rep(list(), length.out = num_wins)
h2_wins <- rep(list(), length.out = num_wins)
v_wins <- rep(list(), length.out = num_wins)
for (i in 1:num_wins) {
h1_wins[[ i ]] <- h1[((i - 1) * win_moving + 1):(i * win_moving)]
h2_wins[[ i ]] <- h2[((i - 1) * win_moving + 1):(i * win_moving)]
v_wins[[ i ]] <- v[((i - 1) * win_moving + 1):(i * win_moving)]
}
identical(h1_wins[[1]], h1[1:length(h1_wins[[1]])])
identical(h1_wins[[144]], tail(h1, length(h1_wins[[144]])))
h1_wins <- lapply(h1_wins, pre_proc, dt = dt, dc_flag = dc_flag, taper_flag = taper_flag, t_front = t_front,
t_end = t_end, filter_flag = filter_flag, fc = hpass_fc, nPole = -nPole_hp,
is_causal = is_causal, order_zero_padding = order_zero_padding)
library(hvsrProc)
h1_wins <- lapply(h1_wins, pre_proc, dt = dt, dc_flag = dc_flag, taper_flag = taper_flag, t_front = t_front,
t_end = t_end, filter_flag = filter_flag, fc = hpass_fc, nPole = -nPole_hp,
is_causal = is_causal, order_zero_padding = order_zero_padding)
plot(h1_wins[[1]], type = 'l')
plot(h1[1:length(h1_wins[[1]])], type = 'l')
plot(h1_wins[[2]], type = 'l')
plot(h1_wins[[1]], type = 'l')
plot(h1_wins[[2]], type = 'l')
plot(h1_wins[[3]], type = 'l')
plot(h1_wins[[144]], type = 'l')
plot(tail(h1, length(h1_wins[[144]])), type = 'l')
plot(h1_wins[[144]], type = 'l')
plot(tail(h1, length(h1_wins[[144]])), type = 'l')
plot(tail(h1, length(h1_wins[[144]])), type = 'l')
lines(h1_wins[[144]], type = 'l', col = 'red')
sta_lta_flag
h1_stalta <- lapply(h1_wins, sta_lta_calc, short_term = short_term, long_term = long_term, moving_term = sta_lta_moving)
h1_stalta
length(h1_stalta)
length(h1_stalta[[1]])
mean(h1_stalta[[1]])
mean(h1_stalta[[2]])
mean(h1_stalta[[3]])
mean(h1_stalta[[4]])
mean(h1_stalta[[5]])
mean(h1_stalta[[10]])
mean(h1_stalta[[144]])
library(devtools)
document()
document()
document()
library(devtools)
document()
document()
document()
library(devtools)
document()
document()
document()
library(devtools)
document()
document()
document()
