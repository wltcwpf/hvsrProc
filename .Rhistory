hv_ratio <- h_smooth / v_smooth
freq <- fas_h$freq
# interpolation
# rotd50_hv_ratio <- approx(freq, hv_ratio, freq_hv_mean)$y
res$rotd50_hv_ratio <- rotd50_hv_ratio
}
# polar curve:
if (polar_curves_flag) {
polar_degs <- seq(0, 179, by = deg_increment)
polar_hv_ratio <- matrix(data = NA, nrow = length(freq_polar), ncol = length(polar_degs))
h1_fft <- fft(h1_sub)
h2_fft <- fft(h2_sub)
for (i in 1:length(polar_degs)) {
if (i == 1) {
fas_v <- fas_cal(ts = v_sub, dt = dt)
freq <- fas_v$freq
v_smooth <- ko_smooth(freq = fas_v$freq, amp = fas_v$amp)
}
angle_idx <- polar_degs[i]
h_fft <- h1_fft * cos(pi * angle_idx / 180) + h2_fft * sin(pi * angle_idx / 180)
h_smooth <- ko_smooth(freq = freq, amp = abs(h_fft) * dt)
hv_ratio <- h_smooth / v_smooth
polar_hv_ratio[, i] <- approx(freq, hv_ratio, freq_polar)$y
}
res$polar_hv_ratio <- polar_hv_ratio
}
return(res)
}
ptm <- proc.time()
hvsr_list <- lapply(idx_select, hvsr_win_calc, h1_wins = h1_wins, h2_wins = h2_wins,
v_wins = v_wins, dt = dt, rotd50_flag = TRUE, freq_hv_mean = freq_hv_mean,
polar_curves_flag = FALSE)
proc.time() - ptm
#' @param v_wins A list of vertical horizontal component time series. Each element is for one window
#' @param dt The time step
#' @param rotd50_flag The flag indicates if RotD50 HVSR is calculated
#' @param freq_hv_mean The target frequencys of RotD50 HVSR
#' @param polar_curves_flag The flag indicates if polar curves are calculated
#' @param freq_polar The target frequencys of polar HVSR
#' @param deg_increment The degree increment for HVSR polar curves
#' @return The HVSR for the given window
#' @importFrom stats approx fft
#' @export
hvsr_win_calc <- function(i_win, h1_wins, h2_wins, v_wins, dt, rotd50_flag = TRUE, freq_hv_mean,
polar_curves_flag = TRUE, freq_polar, deg_increment = 10) {
h1_sub <- h1_wins[[ i_win ]]
h2_sub <- h2_wins[[ i_win ]]
v_sub <- v_wins[[ i_win ]]
res <- list()
# RotD50 curve:
if (rotd50_flag) {
# find rotation angle for PGA RotD50 and calculate RotD50 HVSR
# angle_idx <- ang_pga_rotd50_calc(h1 = h1_sub, h2 = h2_sub)
angle_idx <- 10
h_combin <- h1_sub * cos(pi * angle_idx / 180) + h2_sub * sin(pi * angle_idx / 180)
fas_h <- fas_cal(ts = h_combin, dt = dt)
h_smooth <- ko_smooth(freq = fas_h$freq, amp = fas_h$amp)
fas_v <- fas_cal(ts = v_sub, dt = dt)
v_smooth <- ko_smooth(freq = fas_v$freq, amp = fas_v$amp)
hv_ratio <- h_smooth / v_smooth
freq <- fas_h$freq
# interpolation
# rotd50_hv_ratio <- approx(freq, hv_ratio, freq_hv_mean)$y
# res$rotd50_hv_ratio <- rotd50_hv_ratio
}
# polar curve:
if (polar_curves_flag) {
polar_degs <- seq(0, 179, by = deg_increment)
polar_hv_ratio <- matrix(data = NA, nrow = length(freq_polar), ncol = length(polar_degs))
h1_fft <- fft(h1_sub)
h2_fft <- fft(h2_sub)
for (i in 1:length(polar_degs)) {
if (i == 1) {
fas_v <- fas_cal(ts = v_sub, dt = dt)
freq <- fas_v$freq
v_smooth <- ko_smooth(freq = fas_v$freq, amp = fas_v$amp)
}
angle_idx <- polar_degs[i]
h_fft <- h1_fft * cos(pi * angle_idx / 180) + h2_fft * sin(pi * angle_idx / 180)
h_smooth <- ko_smooth(freq = freq, amp = abs(h_fft) * dt)
hv_ratio <- h_smooth / v_smooth
polar_hv_ratio[, i] <- approx(freq, hv_ratio, freq_polar)$y
}
res$polar_hv_ratio <- polar_hv_ratio
}
return(res)
}
ptm <- proc.time()
hvsr_list <- lapply(idx_select, hvsr_win_calc, h1_wins = h1_wins, h2_wins = h2_wins,
v_wins = v_wins, dt = dt, rotd50_flag = TRUE, freq_hv_mean = freq_hv_mean,
polar_curves_flag = FALSE)
proc.time() - ptm
?ko_smooth
#' @param v_wins A list of vertical horizontal component time series. Each element is for one window
#' @param dt The time step
#' @param rotd50_flag The flag indicates if RotD50 HVSR is calculated
#' @param freq_hv_mean The target frequencys of RotD50 HVSR
#' @param polar_curves_flag The flag indicates if polar curves are calculated
#' @param freq_polar The target frequencys of polar HVSR
#' @param deg_increment The degree increment for HVSR polar curves
#' @return The HVSR for the given window
#' @importFrom stats approx fft
#' @export
hvsr_win_calc <- function(i_win, h1_wins, h2_wins, v_wins, dt, rotd50_flag = TRUE, freq_hv_mean,
polar_curves_flag = TRUE, freq_polar, deg_increment = 10) {
h1_sub <- h1_wins[[ i_win ]]
h2_sub <- h2_wins[[ i_win ]]
v_sub <- v_wins[[ i_win ]]
res <- list()
# RotD50 curve:
if (rotd50_flag) {
# find rotation angle for PGA RotD50 and calculate RotD50 HVSR
# angle_idx <- ang_pga_rotd50_calc(h1 = h1_sub, h2 = h2_sub)
angle_idx <- 10
h_combin <- h1_sub * cos(pi * angle_idx / 180) + h2_sub * sin(pi * angle_idx / 180)
fas_h <- fas_cal(ts = h_combin, dt = dt)
h_smooth <- ko_smooth(freq = fas_h$freq, amp = fas_h$amp)
fas_v <- fas_cal(ts = v_sub, dt = dt)
v_smooth <- ko_smooth(freq = fas_v$freq, amp = fas_v$amp)
hv_ratio <- h_smooth / v_smooth
freq <- fas_h$freq
# interpolation
rotd50_hv_ratio <- approx(freq, hv_ratio, freq_hv_mean)$y
res$rotd50_hv_ratio <- rotd50_hv_ratio
}
# polar curve:
if (polar_curves_flag) {
polar_degs <- seq(0, 179, by = deg_increment)
polar_hv_ratio <- matrix(data = NA, nrow = length(freq_polar), ncol = length(polar_degs))
h1_fft <- fft(h1_sub)
h2_fft <- fft(h2_sub)
for (i in 1:length(polar_degs)) {
if (i == 1) {
fas_v <- fas_cal(ts = v_sub, dt = dt)
freq <- fas_v$freq
v_smooth <- ko_smooth(freq = fas_v$freq, amp = fas_v$amp)
}
angle_idx <- polar_degs[i]
h_fft <- h1_fft * cos(pi * angle_idx / 180) + h2_fft * sin(pi * angle_idx / 180)
h_smooth <- ko_smooth(freq = freq, amp = abs(h_fft) * dt)
hv_ratio <- h_smooth / v_smooth
polar_hv_ratio[, i] <- approx(freq, hv_ratio, freq_polar)$y
}
res$polar_hv_ratio <- polar_hv_ratio
}
return(res)
}
ptm <- proc.time()
hvsr_list <- lapply(idx_select, hvsr_win_calc, h1_wins = h1_wins, h2_wins = h2_wins,
v_wins = v_wins, dt = dt, rotd50_flag = TRUE, freq_hv_mean = freq_hv_mean,
polar_curves_flag = FALSE)
proc.time() - ptm
#' @param v_wins A list of vertical horizontal component time series. Each element is for one window
#' @param dt The time step
#' @param rotd50_flag The flag indicates if RotD50 HVSR is calculated
#' @param freq_hv_mean The target frequencys of RotD50 HVSR
#' @param polar_curves_flag The flag indicates if polar curves are calculated
#' @param freq_polar The target frequencys of polar HVSR
#' @param deg_increment The degree increment for HVSR polar curves
#' @return The HVSR for the given window
#' @importFrom stats approx fft
#' @export
hvsr_win_calc <- function(i_win, h1_wins, h2_wins, v_wins, dt, rotd50_flag = TRUE, freq_hv_mean,
polar_curves_flag = TRUE, freq_polar, deg_increment = 10) {
h1_sub <- h1_wins[[ i_win ]]
h2_sub <- h2_wins[[ i_win ]]
v_sub <- v_wins[[ i_win ]]
res <- list()
# RotD50 curve:
if (rotd50_flag) {
# find rotation angle for PGA RotD50 and calculate RotD50 HVSR
# angle_idx <- ang_pga_rotd50_calc(h1 = h1_sub, h2 = h2_sub)
angle_idx <- 10
h_combin <- h1_sub * cos(pi * angle_idx / 180) + h2_sub * sin(pi * angle_idx / 180)
fas_h <- fas_cal(ts = h_combin, dt = dt)
h_smooth <- ko_smooth(freq = fas_h$freq, amp = fas_h$amp)
fas_v <- fas_cal(ts = v_sub, dt = dt)
v_smooth <- ko_smooth(freq = fas_v$freq, amp = fas_v$amp)
hv_ratio <- h_smooth / v_smooth
freq <- fas_h$freq
# interpolation
# rotd50_hv_ratio <- approx(freq, hv_ratio, freq_hv_mean)$y
# res$rotd50_hv_ratio <- rotd50_hv_ratio
}
# polar curve:
if (polar_curves_flag) {
polar_degs <- seq(0, 179, by = deg_increment)
polar_hv_ratio <- matrix(data = NA, nrow = length(freq_polar), ncol = length(polar_degs))
h1_fft <- fft(h1_sub)
h2_fft <- fft(h2_sub)
for (i in 1:length(polar_degs)) {
if (i == 1) {
fas_v <- fas_cal(ts = v_sub, dt = dt)
freq <- fas_v$freq
v_smooth <- ko_smooth(freq = fas_v$freq, amp = fas_v$amp)
}
angle_idx <- polar_degs[i]
h_fft <- h1_fft * cos(pi * angle_idx / 180) + h2_fft * sin(pi * angle_idx / 180)
h_smooth <- ko_smooth(freq = freq, amp = abs(h_fft) * dt)
hv_ratio <- h_smooth / v_smooth
polar_hv_ratio[, i] <- approx(freq, hv_ratio, freq_polar)$y
}
res$polar_hv_ratio <- polar_hv_ratio
}
return(res)
}
ptm <- proc.time()
hvsr_list <- lapply(idx_select, hvsr_win_calc, h1_wins = h1_wins, h2_wins = h2_wins,
v_wins = v_wins, dt = dt, rotd50_flag = TRUE, freq_hv_mean = freq_hv_mean,
polar_curves_flag = FALSE)
proc.time() - ptm
#' @param v_wins A list of vertical horizontal component time series. Each element is for one window
#' @param dt The time step
#' @param rotd50_flag The flag indicates if RotD50 HVSR is calculated
#' @param freq_hv_mean The target frequencys of RotD50 HVSR
#' @param polar_curves_flag The flag indicates if polar curves are calculated
#' @param freq_polar The target frequencys of polar HVSR
#' @param deg_increment The degree increment for HVSR polar curves
#' @return The HVSR for the given window
#' @importFrom stats approx fft
#' @export
hvsr_win_calc <- function(i_win, h1_wins, h2_wins, v_wins, dt, rotd50_flag = TRUE, freq_hv_mean,
polar_curves_flag = TRUE, freq_polar, deg_increment = 10) {
h1_sub <- h1_wins[[ i_win ]]
h2_sub <- h2_wins[[ i_win ]]
v_sub <- v_wins[[ i_win ]]
res <- list()
# RotD50 curve:
if (rotd50_flag) {
# find rotation angle for PGA RotD50 and calculate RotD50 HVSR
angle_idx <- ang_pga_rotd50_calc(h1 = h1_sub, h2 = h2_sub)
angle_idx <- 10
h_combin <- h1_sub * cos(pi * angle_idx / 180) + h2_sub * sin(pi * angle_idx / 180)
fas_h <- fas_cal(ts = h_combin, dt = dt)
# h_smooth <- ko_smooth(freq = fas_h$freq, amp = fas_h$amp)
fas_v <- fas_cal(ts = v_sub, dt = dt)
# v_smooth <- ko_smooth(freq = fas_v$freq, amp = fas_v$amp)
# hv_ratio <- h_smooth / v_smooth
# freq <- fas_h$freq
# interpolation
# rotd50_hv_ratio <- approx(freq, hv_ratio, freq_hv_mean)$y
# res$rotd50_hv_ratio <- rotd50_hv_ratio
}
# polar curve:
if (polar_curves_flag) {
polar_degs <- seq(0, 179, by = deg_increment)
polar_hv_ratio <- matrix(data = NA, nrow = length(freq_polar), ncol = length(polar_degs))
h1_fft <- fft(h1_sub)
h2_fft <- fft(h2_sub)
for (i in 1:length(polar_degs)) {
if (i == 1) {
fas_v <- fas_cal(ts = v_sub, dt = dt)
freq <- fas_v$freq
v_smooth <- ko_smooth(freq = fas_v$freq, amp = fas_v$amp)
}
angle_idx <- polar_degs[i]
h_fft <- h1_fft * cos(pi * angle_idx / 180) + h2_fft * sin(pi * angle_idx / 180)
h_smooth <- ko_smooth(freq = freq, amp = abs(h_fft) * dt)
hv_ratio <- h_smooth / v_smooth
polar_hv_ratio[, i] <- approx(freq, hv_ratio, freq_polar)$y
}
res$polar_hv_ratio <- polar_hv_ratio
}
return(res)
}
ptm <- proc.time()
hvsr_list <- lapply(idx_select, hvsr_win_calc, h1_wins = h1_wins, h2_wins = h2_wins,
v_wins = v_wins, dt = dt, rotd50_flag = TRUE, freq_hv_mean = freq_hv_mean,
polar_curves_flag = FALSE)
proc.time() - ptm
#' @param v_wins A list of vertical horizontal component time series. Each element is for one window
#' @param dt The time step
#' @param rotd50_flag The flag indicates if RotD50 HVSR is calculated
#' @param freq_hv_mean The target frequencys of RotD50 HVSR
#' @param polar_curves_flag The flag indicates if polar curves are calculated
#' @param freq_polar The target frequencys of polar HVSR
#' @param deg_increment The degree increment for HVSR polar curves
#' @return The HVSR for the given window
#' @importFrom stats approx fft
#' @export
hvsr_win_calc <- function(i_win, h1_wins, h2_wins, v_wins, dt, rotd50_flag = TRUE, freq_hv_mean,
polar_curves_flag = TRUE, freq_polar, deg_increment = 10) {
h1_sub <- h1_wins[[ i_win ]]
h2_sub <- h2_wins[[ i_win ]]
v_sub <- v_wins[[ i_win ]]
res <- list()
# RotD50 curve:
if (rotd50_flag) {
# find rotation angle for PGA RotD50 and calculate RotD50 HVSR
angle_idx <- ang_pga_rotd50_calc(h1 = h1_sub, h2 = h2_sub)
h_combin <- h1_sub * cos(pi * angle_idx / 180) + h2_sub * sin(pi * angle_idx / 180)
fas_h <- fas_cal(ts = h_combin, dt = dt)
h_smooth <- ko_smooth(freq = fas_h$freq, amp = fas_h$amp, rate = 1.5)
fas_v <- fas_cal(ts = v_sub, dt = dt)
v_smooth <- ko_smooth(freq = fas_v$freq, amp = fas_v$amp, rate = 1.5)
hv_ratio <- h_smooth / v_smooth
freq <- fas_h$freq
# interpolation
rotd50_hv_ratio <- approx(freq, hv_ratio, freq_hv_mean)$y
res$rotd50_hv_ratio <- rotd50_hv_ratio
}
# polar curve:
if (polar_curves_flag) {
polar_degs <- seq(0, 179, by = deg_increment)
polar_hv_ratio <- matrix(data = NA, nrow = length(freq_polar), ncol = length(polar_degs))
h1_fft <- fft(h1_sub)
h2_fft <- fft(h2_sub)
for (i in 1:length(polar_degs)) {
if (i == 1) {
fas_v <- fas_cal(ts = v_sub, dt = dt)
freq <- fas_v$freq
v_smooth <- ko_smooth(freq = fas_v$freq, amp = fas_v$amp)
}
angle_idx <- polar_degs[i]
h_fft <- h1_fft * cos(pi * angle_idx / 180) + h2_fft * sin(pi * angle_idx / 180)
h_smooth <- ko_smooth(freq = freq, amp = abs(h_fft) * dt)
hv_ratio <- h_smooth / v_smooth
polar_hv_ratio[, i] <- approx(freq, hv_ratio, freq_polar)$y
}
res$polar_hv_ratio <- polar_hv_ratio
}
return(res)
}
ptm <- proc.time()
hvsr_list <- lapply(idx_select, hvsr_win_calc, h1_wins = h1_wins, h2_wins = h2_wins,
v_wins = v_wins, dt = dt, rotd50_flag = TRUE, freq_hv_mean = freq_hv_mean,
polar_curves_flag = FALSE)
proc.time() - ptm
#' @param v_wins A list of vertical horizontal component time series. Each element is for one window
#' @param dt The time step
#' @param rotd50_flag The flag indicates if RotD50 HVSR is calculated
#' @param freq_hv_mean The target frequencys of RotD50 HVSR
#' @param polar_curves_flag The flag indicates if polar curves are calculated
#' @param freq_polar The target frequencys of polar HVSR
#' @param deg_increment The degree increment for HVSR polar curves
#' @return The HVSR for the given window
#' @importFrom stats approx fft
#' @export
hvsr_win_calc <- function(i_win, h1_wins, h2_wins, v_wins, dt, rotd50_flag = TRUE, freq_hv_mean,
polar_curves_flag = TRUE, freq_polar, deg_increment = 10) {
h1_sub <- h1_wins[[ i_win ]]
h2_sub <- h2_wins[[ i_win ]]
v_sub <- v_wins[[ i_win ]]
res <- list()
# RotD50 curve:
if (rotd50_flag) {
# find rotation angle for PGA RotD50 and calculate RotD50 HVSR
angle_idx <- ang_pga_rotd50_calc(h1 = h1_sub, h2 = h2_sub)
h_combin <- h1_sub * cos(pi * angle_idx / 180) + h2_sub * sin(pi * angle_idx / 180)
fas_h <- fas_cal(ts = h_combin, dt = dt)
h_smooth <- ko_smooth(freq = fas_h$freq, amp = fas_h$amp, rate = 1)
fas_v <- fas_cal(ts = v_sub, dt = dt)
v_smooth <- ko_smooth(freq = fas_v$freq, amp = fas_v$amp, rate = 1)
hv_ratio <- h_smooth / v_smooth
freq <- fas_h$freq
# interpolation
rotd50_hv_ratio <- approx(freq, hv_ratio, freq_hv_mean)$y
res$rotd50_hv_ratio <- rotd50_hv_ratio
}
# polar curve:
if (polar_curves_flag) {
polar_degs <- seq(0, 179, by = deg_increment)
polar_hv_ratio <- matrix(data = NA, nrow = length(freq_polar), ncol = length(polar_degs))
h1_fft <- fft(h1_sub)
h2_fft <- fft(h2_sub)
for (i in 1:length(polar_degs)) {
if (i == 1) {
fas_v <- fas_cal(ts = v_sub, dt = dt)
freq <- fas_v$freq
v_smooth <- ko_smooth(freq = fas_v$freq, amp = fas_v$amp)
}
angle_idx <- polar_degs[i]
h_fft <- h1_fft * cos(pi * angle_idx / 180) + h2_fft * sin(pi * angle_idx / 180)
h_smooth <- ko_smooth(freq = freq, amp = abs(h_fft) * dt)
hv_ratio <- h_smooth / v_smooth
polar_hv_ratio[, i] <- approx(freq, hv_ratio, freq_polar)$y
}
res$polar_hv_ratio <- polar_hv_ratio
}
return(res)
}
ptm <- proc.time()
hvsr_list <- lapply(idx_select, hvsr_win_calc, h1_wins = h1_wins, h2_wins = h2_wins,
v_wins = v_wins, dt = dt, rotd50_flag = TRUE, freq_hv_mean = freq_hv_mean,
polar_curves_flag = FALSE)
proc.time() - ptm
30*(180/10)
540/60
fas_h <- fas_cal(ts = h1_wins[[1]], dt = dt)
fas_v <- fas_cal(ts = v_wins[[1]], dt = dt)
ptm <- proc.time()
for(i in 1:150){
h_smooth <- ko_smooth(freq = fas_h$freq, amp = fas_h$amp)
v_smooth <- ko_smooth(freq = fas_v$freq, amp = fas_v$amp)
}
proc.time() - ptm
document()
load_all
load_all()
check()
library(hvsrProc)
file.exists("~/.ssh/id_rsa.pub")
usethis::use_readme_rmd()
library(devtools)
create_project('/Users/PFW/Desktop/Project/R_packages/hvsrPeak')
library(devtools)
install.packages('pandoc')
library(hvsrProc)
x <- logspace(1,40)
x
y <- seq(1,40)
plot(log10(x), y, type = 'n', xaxt = 'n')
y <- seq(1,50)
plot(log10(x), y, type = 'n', xaxt = 'n')
?plot
xlab = NA
ylab = NA
type = NA
main = NA
plot(log10(x), y, type = type, xaxt = 'n', xlab = xlab, ylab = ylab, main = main)
type
xlab = NULL
ylab = NULL, type = NULL, main = NULL) {
ylab = NULL
type = NULL
main = NULL
plot(log10(x), y, type = type, xaxt = 'n', xlab = xlab, ylab = ylab, main = main)
log10_scale = 'x'
tick_type = 'lin'
minor_tick = TRUE
log10_ticks(log10(x), y, log10_scale = log10_scale, tick_type = tick_type, minor_tick = minor_tick)
plot(log10(x), y, type = type, xaxt = 'n', xlab = xlab, ylab = ylab, main = main)
log10_ticks(log10(x), y, log10_scale = log10_scale, tick_type = tick_type, minor_tick = minor_tick)
plot(log10(x), y, type = type, xaxt = 'n', xlab = xlab, ylab = ylab, main = main)
log10_ticks(x, y, log10_scale = log10_scale, tick_type = tick_type, minor_tick = minor_tick)
x
x_range <- range(x)
x <- x[x > 0]
x_range <- range(x)
x_range_log10 <- c(ceiling(log10(x_range[1])), floor(log10(x_range[2])))
x_range_log10
x_range_minor_log10 <- c(floor(log10(x_range[1])), ceiling(log10(x_range[2])))
x_range_minor_log10
atx_minor <- outer(1:9, 10^(x_range_minor_log10[1]:x_range_minor_log10[2]))
atx_minor
axis(1, at = atx_minor, labels = FALSE, tcl = par("tcl") * 0.5)
atx_minor
plot(log10(x), y, type = type, xaxt = 'n', xlab = xlab, ylab = ylab, main = main)
x
plot(x, y, type = type, xaxt = 'n', xlab = xlab, ylab = ylab, main = main, log = 'x')
log10_ticks(x, y, log10_scale = log10_scale, tick_type = tick_type, minor_tick = minor_tick)
y <- x
x <- seq(1,50)
plot(x, y, type = type, xaxt = 'n', xlab = xlab, ylab = ylab, main = main, log = 'y')
plot(x, y, type = type, yaxt = 'n', xlab = xlab, ylab = ylab, main = main, log = 'y')
log10_ticks(x, y, log10_scale = log10_scale, tick_type = tick_type, minor_tick = minor_tick)
log10_scale = 'y'
plot(x, y, type = type, yaxt = 'n', xlab = xlab, ylab = ylab, main = main, log = 'y')
log10_ticks(x, y, log10_scale = log10_scale, tick_type = tick_type, minor_tick = minor_tick)
x <- y
plot(x, y, type = type, yaxt = 'n', xaxt = 'n', xlab = xlab, ylab = ylab, main = main, log = 'xy')
log10_scale = 'xy'
log10_ticks(x, y, log10_scale = log10_scale, tick_type = tick_type, minor_tick = minor_tick)
#' @param y The array of y values
#' @param log10_scale A string takes "x", "y", or "xy". It indicates the axix that will be plotted in log10 scale
#' @param tick_type A string takes "exp" (the ticks are expressed by 10^) or "lin" (the ticks are expressed by 100..)
#' @param minor_tick Binary, indicates if minor ticks are plotted
#' @param xlab A title for the x axis
#' @param ylab A title for the y axis
#' @param type What type of plot should be drawn. The setting is the same as plot()
#' @param main An overall title for the plot
#' @importFrom graphics axis par
#' @export
plot_log10 <- function(x, y, log10_scale = 'x', tick_type = 'lin', minor_tick = TRUE,
xlab = NULL, ylab = NULL, type = NULL, main = NULL) {
if (log10_scale == 'x') {
plot(x, y, type = type, xaxt = 'n', xlab = xlab, ylab = ylab, main = main, log = 'x')
log10_ticks(x, y, log10_scale = log10_scale, tick_type = tick_type, minor_tick = minor_tick)
}
if (log10_scale == 'y') {
plot(x, y, type = type, yaxt = 'n', xlab = xlab, ylab = ylab, main = main, log = 'y')
log10_ticks(x, y, log10_scale = log10_scale, tick_type = tick_type, minor_tick = minor_tick)
}
if (log10_scale == 'xy') {
plot(x, y, type = type, yaxt = 'n', xaxt = 'n', xlab = xlab, ylab = ylab, main = main, log = 'xy')
log10_ticks(x, y, log10_scale = log10_scale, tick_type = tick_type, minor_tick = minor_tick)
}
}
plot_log10(x,y, log10_scale = 'xy', xlab = 'x val', ylab = 'y val', type = 'l')
plot_log10(x,y, log10_scale = 'xy')
plot_log10(x,y, log10_scale = 'xy', xlab = 'x val', ylab = 'y val', type = 'l', main = 'hello')
library(devtools)
document()
load_all()
plot_log10(x, y)
plot_log10(x, y, log10_scale = 'xy')
plot_log10(x, y, log10_scale = 'xy', type = 'l')
?plot_log10
check()
load_all()
library(hvsrProc)
document()
check()
load_all()
document()
check()
plot_log10(x, y, log10_scale = 'xy', type = 'l', ylim = c(1,10))
load_all()
plot_log10(x, y, log10_scale = 'xy', type = 'l', ylim = c(1,10))
library(hvsrProc)
plot_log10(x, y, log10_scale = 'xy', type = 'l', ylim = c(1,10))
hvsrProc::plot_log10(x, y, log10_scale = 'xy', type = 'l', ylim = c(1,10))
